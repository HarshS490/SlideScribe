generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  presentations Presentation[] @relation("UserToPresentation")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Presentation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  link      String
  title     String
  type      String
  thumbnail String? 
  public_id String
  user      User     @relation("UserToPresentation", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  scripts   Script[]
  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

model Script {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  slideNo   String
  content   String
  source    Presentation @relation(fields: [sourceId], references: [id])
  sourceId  String       @db.ObjectId
  updatedAt DateTime     @updatedAt()
  createdAt DateTime     @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
